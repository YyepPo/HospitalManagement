{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFieldV6TextField = exports.addPositionPropertiesToSections = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useForkRef = _interopRequireDefault(require(\"@mui/utils/useForkRef\"));\nvar _utils = require(\"../../utils/utils\");\nvar _useField = require(\"./useField.utils\");\nconst cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nconst addPositionPropertiesToSections = (sections, localizedDigits, isRtl) => {\n  let position = 0;\n  let positionInInput = isRtl ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = (0, _useField.getSectionVisibleValue)(section, isRtl ? 'input-rtl' : 'input-ltr', localizedDigits);\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + (cleanedValue === '' ? 0 : renderedValue.indexOf(cleanedValue[0])) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push((0, _extends2.default)({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nexports.addPositionPropertiesToSections = addPositionPropertiesToSections;\nconst useFieldV6TextField = params => {\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const focusTimeoutRef = React.useRef(undefined);\n  const selectionSyncTimeoutRef = React.useRef(undefined);\n  const {\n    forwardedProps: {\n      onFocus,\n      onClick,\n      onPaste,\n      onBlur,\n      inputRef: inputRefProp,\n      placeholder: inPlaceholder\n    },\n    internalProps: {\n      readOnly = false,\n      disabled = false\n    },\n    parsedSelectedSections,\n    activeSectionIndex,\n    state,\n    fieldValueManager,\n    valueManager,\n    applyCharacterEditing,\n    resetCharacterQuery,\n    updateSectionValue,\n    updateValueFromValueStr,\n    clearActiveSection,\n    clearValue,\n    setTempAndroidValueStr,\n    setSelectedSections,\n    getSectionsFromValue,\n    areAllSectionsEmpty,\n    localizedDigits\n  } = params;\n  const inputRef = React.useRef(null);\n  const handleRef = (0, _useForkRef.default)(inputRefProp, inputRef);\n  const sections = React.useMemo(() => addPositionPropertiesToSections(state.sections, localizedDigits, isRtl), [state.sections, localizedDigits, isRtl]);\n  const interactions = React.useMemo(() => ({\n    syncSelectionToDOM: () => {\n      if (!inputRef.current) {\n        return;\n      }\n      if (parsedSelectedSections == null) {\n        if (inputRef.current.scrollLeft) {\n          // Ensure that input content is not marked as selected.\n          // setting selection range to 0 causes issues in Safari.\n          // https://bugs.webkit.org/show_bug.cgi?id=224425\n          inputRef.current.scrollLeft = 0;\n        }\n        return;\n      }\n\n      // On multi input range pickers we want to update selection range only for the active input\n      // This helps to avoid the focus jumping on Safari https://github.com/mui/mui-x/issues/9003\n      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425\n      if (inputRef.current !== (0, _utils.getActiveElement)(document)) {\n        return;\n      }\n\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      if (parsedSelectedSections === 'all') {\n        inputRef.current.select();\n      } else {\n        const selectedSection = sections[parsedSelectedSections];\n        const selectionStart = selectedSection.type === 'empty' ? selectedSection.startInInput - selectedSection.startSeparator.length : selectedSection.startInInput;\n        const selectionEnd = selectedSection.type === 'empty' ? selectedSection.endInInput + selectedSection.endSeparator.length : selectedSection.endInInput;\n        if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n          if (inputRef.current === (0, _utils.getActiveElement)(document)) {\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          }\n        }\n        clearTimeout(selectionSyncTimeoutRef.current);\n        selectionSyncTimeoutRef.current = setTimeout(() => {\n          // handle case when the selection is not updated correctly\n          // could happen on Android\n          if (inputRef.current && inputRef.current === (0, _utils.getActiveElement)(document) &&\n          // The section might loose all selection, where `selectionStart === selectionEnd`\n          // https://github.com/mui/mui-x/pull/13652\n          inputRef.current.selectionStart === inputRef.current.selectionEnd && (inputRef.current.selectionStart !== selectionStart || inputRef.current.selectionEnd !== selectionEnd)) {\n            interactions.syncSelectionToDOM();\n          }\n        });\n      }\n\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    },\n    getActiveSectionIndexFromDOM: () => {\n      const browserStartIndex = inputRef.current.selectionStart ?? 0;\n      const browserEndIndex = inputRef.current.selectionEnd ?? 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? sections.length - 1 : nextSectionIndex - 1;\n    },\n    focusField: (newSelectedSection = 0) => {\n      if ((0, _utils.getActiveElement)(document) === inputRef.current) {\n        return;\n      }\n      inputRef.current?.focus();\n      setSelectedSections(newSelectedSection);\n    },\n    setSelectedSections: newSelectedSections => setSelectedSections(newSelectedSections),\n    isFieldFocused: () => inputRef.current === (0, _utils.getActiveElement)(document)\n  }), [inputRef, parsedSelectedSections, sections, setSelectedSections]);\n  const syncSelectionFromDOM = () => {\n    const browserStartIndex = inputRef.current.selectionStart ?? 0;\n    let nextSectionIndex;\n    if (browserStartIndex <= sections[0].startInInput) {\n      // Special case if browser index is in invisible characters at the beginning\n      nextSectionIndex = 1;\n    } else if (browserStartIndex >= sections[sections.length - 1].endInInput) {\n      // If the click is after the last character of the input, then we want to select the 1st section.\n      nextSectionIndex = 1;\n    } else {\n      nextSectionIndex = sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    }\n    const sectionIndex = nextSectionIndex === -1 ? sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputFocus = (0, _useEventCallback.default)((...args) => {\n    onFocus?.(...args);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (activeSectionIndex != null) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputClick = (0, _useEventCallback.default)((event, ...args) => {\n    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.\n    // We avoid this by checking if the call of `handleInputClick` is actually intended, or a side effect.\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n    onClick?.(event, ...args);\n    syncSelectionFromDOM();\n  });\n  const handleInputPaste = (0, _useEventCallback.default)(event => {\n    onPaste?.(event);\n\n    // prevent default to avoid the input `onChange` handler being called\n    event.preventDefault();\n    if (readOnly || disabled) {\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (typeof parsedSelectedSections === 'number') {\n      const activeSection = state.sections[parsedSelectedSections];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;\n      if (isValidPastedValue) {\n        resetCharacterQuery();\n        updateSectionValue({\n          activeSection,\n          newSectionValue: pastedValue,\n          shouldGoToNextSection: true\n        });\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value corresponds to a single section, but not the expected type,\n        // skip the modification\n        return;\n      }\n    }\n    resetCharacterQuery();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleContainerBlur = (0, _useEventCallback.default)((...args) => {\n    onBlur?.(...args);\n    setSelectedSections(null);\n  });\n  const handleInputChange = (0, _useEventCallback.default)(event => {\n    if (readOnly) {\n      return;\n    }\n    const targetValue = event.target.value;\n    if (targetValue === '') {\n      resetCharacterQuery();\n      clearValue();\n      return;\n    }\n    const eventData = event.nativeEvent.data;\n    // Calling `.fill(04/11/2022)` in playwright will trigger a change event with the requested content to insert in `event.nativeEvent.data`\n    // usual changes have only the currently typed character in the `event.nativeEvent.data`\n    const shouldUseEventData = eventData && eventData.length > 1;\n    const valueStr = shouldUseEventData ? eventData : targetValue;\n    const cleanValueStr = cleanString(valueStr);\n    if (parsedSelectedSections === 'all') {\n      setSelectedSections(activeSectionIndex);\n    }\n\n    // If no section is selected or eventData should be used, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (activeSectionIndex == null || shouldUseEventData) {\n      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (parsedSelectedSections === 'all' && cleanValueStr.length === 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getV6InputValueFromSections(sections, localizedDigits, isRtl));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = sections[activeSectionIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);\n    }\n    if (keyPressed.length === 0) {\n      if ((0, _useField.isAndroid)()) {\n        setTempAndroidValueStr(valueStr);\n      }\n      resetCharacterQuery();\n      clearActiveSection();\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: activeSectionIndex\n    });\n  });\n  const placeholder = React.useMemo(() => {\n    if (inPlaceholder !== undefined) {\n      return inPlaceholder;\n    }\n    return fieldValueManager.getV6InputValueFromSections(getSectionsFromValue(valueManager.emptyValue), localizedDigits, isRtl);\n  }, [inPlaceholder, fieldValueManager, getSectionsFromValue, valueManager.emptyValue, localizedDigits, isRtl]);\n  const valueStr = React.useMemo(() => state.tempValueStrAndroid ?? fieldValueManager.getV6InputValueFromSections(state.sections, localizedDigits, isRtl), [state.sections, fieldValueManager, state.tempValueStrAndroid, localizedDigits, isRtl]);\n  React.useEffect(() => {\n    // Select all the sections when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === (0, _utils.getActiveElement)(document)) {\n      setSelectedSections('all');\n    }\n    return () => {\n      clearTimeout(focusTimeoutRef.current);\n      clearTimeout(selectionSyncTimeoutRef.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const inputMode = React.useMemo(() => {\n    if (activeSectionIndex == null) {\n      return 'text';\n    }\n    if (state.sections[activeSectionIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'numeric';\n  }, [activeSectionIndex, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === (0, _utils.getActiveElement)(document);\n  const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;\n  return {\n    interactions,\n    returnedValue: {\n      // Forwarded\n      readOnly,\n      onBlur: handleContainerBlur,\n      onClick: handleInputClick,\n      onFocus: handleInputFocus,\n      onPaste: handleInputPaste,\n      inputRef: handleRef,\n      // Additional\n      enableAccessibleFieldDOMStructure: false,\n      placeholder,\n      inputMode,\n      autoComplete: 'off',\n      value: shouldShowPlaceholder ? '' : valueStr,\n      onChange: handleInputChange\n    }\n  };\n};\nexports.useFieldV6TextField = useFieldV6TextField;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","Object","defineProperty","exports","value","useFieldV6TextField","addPositionPropertiesToSections","_extends2","React","_RtlProvider","_useEventCallback","_useForkRef","_utils","_useField","cleanString","dirtyString","replace","sections","localizedDigits","isRtl","position","positionInInput","newSections","i","length","section","renderedValue","getSectionVisibleValue","sectionStr","startSeparator","endSeparator","sectionLength","sectionLengthInInput","cleanedValue","startInInput","indexOf","endInInput","push","start","end","params","useRtl","focusTimeoutRef","useRef","undefined","selectionSyncTimeoutRef","forwardedProps","onFocus","onClick","onPaste","onBlur","inputRef","inputRefProp","placeholder","inPlaceholder","internalProps","readOnly","disabled","parsedSelectedSections","activeSectionIndex","state","fieldValueManager","valueManager","applyCharacterEditing","resetCharacterQuery","updateSectionValue","updateValueFromValueStr","clearActiveSection","clearValue","setTempAndroidValueStr","setSelectedSections","getSectionsFromValue","areAllSectionsEmpty","handleRef","useMemo","interactions","syncSelectionToDOM","current","scrollLeft","getActiveElement","document","currentScrollTop","scrollTop","select","selectedSection","selectionStart","type","selectionEnd","setSelectionRange","clearTimeout","setTimeout","getActiveSectionIndexFromDOM","browserStartIndex","browserEndIndex","nextSectionIndex","findIndex","focusField","newSelectedSection","focus","newSelectedSections","isFieldFocused","syncSelectionFromDOM","sectionIndex","handleInputFocus","args","input","Number","handleInputClick","event","isDefaultPrevented","handleInputPaste","preventDefault","pastedValue","clipboardData","getData","activeSection","lettersOnly","test","digitsOnly","digitsAndLetterOnly","isValidPastedValue","contentType","newSectionValue","shouldGoToNextSection","handleContainerBlur","handleInputChange","targetValue","target","eventData","nativeEvent","data","shouldUseEventData","valueStr","cleanValueStr","keyPressed","prevValueStr","getV6InputValueFromSections","startOfDiffIndex","endOfDiffIndex","hasDiffOutsideOfActiveSection","activeSectionEndRelativeToNewValue","slice","isAndroid","emptyValue","tempValueStrAndroid","useEffect","inputMode","inputHasFocus","shouldShowPlaceholder","returnedValue","enableAccessibleFieldDOMStructure","autoComplete","onChange"],"sources":["C:/Users/LENOVO/Desktop/spitalmanagement/node_modules/@mui/x-date-pickers/node/internals/hooks/useField/useFieldV6TextField.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFieldV6TextField = exports.addPositionPropertiesToSections = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _useEventCallback = _interopRequireDefault(require(\"@mui/utils/useEventCallback\"));\nvar _useForkRef = _interopRequireDefault(require(\"@mui/utils/useForkRef\"));\nvar _utils = require(\"../../utils/utils\");\nvar _useField = require(\"./useField.utils\");\nconst cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nconst addPositionPropertiesToSections = (sections, localizedDigits, isRtl) => {\n  let position = 0;\n  let positionInInput = isRtl ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = (0, _useField.getSectionVisibleValue)(section, isRtl ? 'input-rtl' : 'input-ltr', localizedDigits);\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + (cleanedValue === '' ? 0 : renderedValue.indexOf(cleanedValue[0])) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push((0, _extends2.default)({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nexports.addPositionPropertiesToSections = addPositionPropertiesToSections;\nconst useFieldV6TextField = params => {\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const focusTimeoutRef = React.useRef(undefined);\n  const selectionSyncTimeoutRef = React.useRef(undefined);\n  const {\n    forwardedProps: {\n      onFocus,\n      onClick,\n      onPaste,\n      onBlur,\n      inputRef: inputRefProp,\n      placeholder: inPlaceholder\n    },\n    internalProps: {\n      readOnly = false,\n      disabled = false\n    },\n    parsedSelectedSections,\n    activeSectionIndex,\n    state,\n    fieldValueManager,\n    valueManager,\n    applyCharacterEditing,\n    resetCharacterQuery,\n    updateSectionValue,\n    updateValueFromValueStr,\n    clearActiveSection,\n    clearValue,\n    setTempAndroidValueStr,\n    setSelectedSections,\n    getSectionsFromValue,\n    areAllSectionsEmpty,\n    localizedDigits\n  } = params;\n  const inputRef = React.useRef(null);\n  const handleRef = (0, _useForkRef.default)(inputRefProp, inputRef);\n  const sections = React.useMemo(() => addPositionPropertiesToSections(state.sections, localizedDigits, isRtl), [state.sections, localizedDigits, isRtl]);\n  const interactions = React.useMemo(() => ({\n    syncSelectionToDOM: () => {\n      if (!inputRef.current) {\n        return;\n      }\n      if (parsedSelectedSections == null) {\n        if (inputRef.current.scrollLeft) {\n          // Ensure that input content is not marked as selected.\n          // setting selection range to 0 causes issues in Safari.\n          // https://bugs.webkit.org/show_bug.cgi?id=224425\n          inputRef.current.scrollLeft = 0;\n        }\n        return;\n      }\n\n      // On multi input range pickers we want to update selection range only for the active input\n      // This helps to avoid the focus jumping on Safari https://github.com/mui/mui-x/issues/9003\n      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425\n      if (inputRef.current !== (0, _utils.getActiveElement)(document)) {\n        return;\n      }\n\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      if (parsedSelectedSections === 'all') {\n        inputRef.current.select();\n      } else {\n        const selectedSection = sections[parsedSelectedSections];\n        const selectionStart = selectedSection.type === 'empty' ? selectedSection.startInInput - selectedSection.startSeparator.length : selectedSection.startInInput;\n        const selectionEnd = selectedSection.type === 'empty' ? selectedSection.endInInput + selectedSection.endSeparator.length : selectedSection.endInInput;\n        if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n          if (inputRef.current === (0, _utils.getActiveElement)(document)) {\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          }\n        }\n        clearTimeout(selectionSyncTimeoutRef.current);\n        selectionSyncTimeoutRef.current = setTimeout(() => {\n          // handle case when the selection is not updated correctly\n          // could happen on Android\n          if (inputRef.current && inputRef.current === (0, _utils.getActiveElement)(document) &&\n          // The section might loose all selection, where `selectionStart === selectionEnd`\n          // https://github.com/mui/mui-x/pull/13652\n          inputRef.current.selectionStart === inputRef.current.selectionEnd && (inputRef.current.selectionStart !== selectionStart || inputRef.current.selectionEnd !== selectionEnd)) {\n            interactions.syncSelectionToDOM();\n          }\n        });\n      }\n\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    },\n    getActiveSectionIndexFromDOM: () => {\n      const browserStartIndex = inputRef.current.selectionStart ?? 0;\n      const browserEndIndex = inputRef.current.selectionEnd ?? 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? sections.length - 1 : nextSectionIndex - 1;\n    },\n    focusField: (newSelectedSection = 0) => {\n      if ((0, _utils.getActiveElement)(document) === inputRef.current) {\n        return;\n      }\n      inputRef.current?.focus();\n      setSelectedSections(newSelectedSection);\n    },\n    setSelectedSections: newSelectedSections => setSelectedSections(newSelectedSections),\n    isFieldFocused: () => inputRef.current === (0, _utils.getActiveElement)(document)\n  }), [inputRef, parsedSelectedSections, sections, setSelectedSections]);\n  const syncSelectionFromDOM = () => {\n    const browserStartIndex = inputRef.current.selectionStart ?? 0;\n    let nextSectionIndex;\n    if (browserStartIndex <= sections[0].startInInput) {\n      // Special case if browser index is in invisible characters at the beginning\n      nextSectionIndex = 1;\n    } else if (browserStartIndex >= sections[sections.length - 1].endInInput) {\n      // If the click is after the last character of the input, then we want to select the 1st section.\n      nextSectionIndex = 1;\n    } else {\n      nextSectionIndex = sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    }\n    const sectionIndex = nextSectionIndex === -1 ? sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputFocus = (0, _useEventCallback.default)((...args) => {\n    onFocus?.(...args);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (activeSectionIndex != null) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputClick = (0, _useEventCallback.default)((event, ...args) => {\n    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.\n    // We avoid this by checking if the call of `handleInputClick` is actually intended, or a side effect.\n    if (event.isDefaultPrevented()) {\n      return;\n    }\n    onClick?.(event, ...args);\n    syncSelectionFromDOM();\n  });\n  const handleInputPaste = (0, _useEventCallback.default)(event => {\n    onPaste?.(event);\n\n    // prevent default to avoid the input `onChange` handler being called\n    event.preventDefault();\n    if (readOnly || disabled) {\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (typeof parsedSelectedSections === 'number') {\n      const activeSection = state.sections[parsedSelectedSections];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;\n      if (isValidPastedValue) {\n        resetCharacterQuery();\n        updateSectionValue({\n          activeSection,\n          newSectionValue: pastedValue,\n          shouldGoToNextSection: true\n        });\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value corresponds to a single section, but not the expected type,\n        // skip the modification\n        return;\n      }\n    }\n    resetCharacterQuery();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleContainerBlur = (0, _useEventCallback.default)((...args) => {\n    onBlur?.(...args);\n    setSelectedSections(null);\n  });\n  const handleInputChange = (0, _useEventCallback.default)(event => {\n    if (readOnly) {\n      return;\n    }\n    const targetValue = event.target.value;\n    if (targetValue === '') {\n      resetCharacterQuery();\n      clearValue();\n      return;\n    }\n    const eventData = event.nativeEvent.data;\n    // Calling `.fill(04/11/2022)` in playwright will trigger a change event with the requested content to insert in `event.nativeEvent.data`\n    // usual changes have only the currently typed character in the `event.nativeEvent.data`\n    const shouldUseEventData = eventData && eventData.length > 1;\n    const valueStr = shouldUseEventData ? eventData : targetValue;\n    const cleanValueStr = cleanString(valueStr);\n    if (parsedSelectedSections === 'all') {\n      setSelectedSections(activeSectionIndex);\n    }\n\n    // If no section is selected or eventData should be used, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (activeSectionIndex == null || shouldUseEventData) {\n      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (parsedSelectedSections === 'all' && cleanValueStr.length === 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getV6InputValueFromSections(sections, localizedDigits, isRtl));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = sections[activeSectionIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);\n    }\n    if (keyPressed.length === 0) {\n      if ((0, _useField.isAndroid)()) {\n        setTempAndroidValueStr(valueStr);\n      }\n      resetCharacterQuery();\n      clearActiveSection();\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: activeSectionIndex\n    });\n  });\n  const placeholder = React.useMemo(() => {\n    if (inPlaceholder !== undefined) {\n      return inPlaceholder;\n    }\n    return fieldValueManager.getV6InputValueFromSections(getSectionsFromValue(valueManager.emptyValue), localizedDigits, isRtl);\n  }, [inPlaceholder, fieldValueManager, getSectionsFromValue, valueManager.emptyValue, localizedDigits, isRtl]);\n  const valueStr = React.useMemo(() => state.tempValueStrAndroid ?? fieldValueManager.getV6InputValueFromSections(state.sections, localizedDigits, isRtl), [state.sections, fieldValueManager, state.tempValueStrAndroid, localizedDigits, isRtl]);\n  React.useEffect(() => {\n    // Select all the sections when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === (0, _utils.getActiveElement)(document)) {\n      setSelectedSections('all');\n    }\n    return () => {\n      clearTimeout(focusTimeoutRef.current);\n      clearTimeout(selectionSyncTimeoutRef.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const inputMode = React.useMemo(() => {\n    if (activeSectionIndex == null) {\n      return 'text';\n    }\n    if (state.sections[activeSectionIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'numeric';\n  }, [activeSectionIndex, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === (0, _utils.getActiveElement)(document);\n  const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;\n  return {\n    interactions,\n    returnedValue: {\n      // Forwarded\n      readOnly,\n      onBlur: handleContainerBlur,\n      onClick: handleInputClick,\n      onFocus: handleInputFocus,\n      onPaste: handleInputPaste,\n      inputRef: handleRef,\n      // Additional\n      enableAccessibleFieldDOMStructure: false,\n      placeholder,\n      inputMode,\n      autoComplete: 'off',\n      value: shouldShowPlaceholder ? '' : valueStr,\n      onChange: handleInputChange\n    }\n  };\n};\nexports.useFieldV6TextField = useFieldV6TextField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}