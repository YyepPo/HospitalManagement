{"ast":null,"code":"// Mock user data - Replace with actual API calls\nconst mockUsers = [{\n  id: 1,\n  name: \"John Doe\",\n  email: \"john@example.com\",\n  password: \"12345678\",\n  role: \"admin\",\n  phone: \"+1234567890\",\n  address: \"123 Main St\",\n  dateOfBirth: \"1990-01-01\"\n}, {\n  id: 2,\n  name: \"Dr. Smith\",\n  email: \"smith@example.com\",\n  password: \"12345678\",\n  role: \"doctor\"\n}, {\n  id: 3,\n  name: \"Jane Patient\",\n  email: \"jane@example.com\",\n  password: \"12345678\",\n  role: \"patient\"\n}];\nexport const login = async (email, password) => {\n  // Mock login - Replace with actual API call\n  const user = mockUsers.find(u => u.email === email && u.password === password);\n  if (user) {\n    // Don't send password to localStorage\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = user;\n    localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n    return userWithoutPassword;\n  }\n  throw new Error('Invalid email or password');\n};\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\nexport const isAuthenticated = () => {\n  return !!getCurrentUser();\n};","map":{"version":3,"names":["mockUsers","id","name","email","password","role","phone","address","dateOfBirth","login","user","find","u","_","userWithoutPassword","localStorage","setItem","JSON","stringify","Error","logout","removeItem","getCurrentUser","userStr","getItem","parse","isAuthenticated"],"sources":["C:/Users/LENOVO/Desktop/spitalmanagement/src/services/authService.js"],"sourcesContent":["// Mock user data - Replace with actual API calls\r\nconst mockUsers = [\r\n    { id: 1, name: \"John Doe\", email: \"john@example.com\", password: \"12345678\", role: \"admin\", phone: \"+1234567890\", address: \"123 Main St\", dateOfBirth: \"1990-01-01\" },\r\n    { id: 2, name: \"Dr. Smith\", email: \"smith@example.com\", password: \"12345678\", role: \"doctor\" },\r\n    { id: 3, name: \"Jane Patient\", email: \"jane@example.com\", password: \"12345678\", role: \"patient\" },\r\n];\r\n\r\nexport const login = async (email, password) => {\r\n    // Mock login - Replace with actual API call\r\n    const user = mockUsers.find(u => u.email === email && u.password === password);\r\n    if (user) {\r\n        // Don't send password to localStorage\r\n        const { password: _, ...userWithoutPassword } = user;\r\n        localStorage.setItem('user', JSON.stringify(userWithoutPassword));\r\n        return userWithoutPassword;\r\n    }\r\n    throw new Error('Invalid email or password');\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('user');\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n    return !!getCurrentUser();\r\n}; "],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,CACd;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE,kBAAkB;EAAEC,QAAQ,EAAE,UAAU;EAAEC,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,aAAa;EAAEC,OAAO,EAAE,aAAa;EAAEC,WAAW,EAAE;AAAa,CAAC,EACpK;EAAEP,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE,mBAAmB;EAAEC,QAAQ,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAS,CAAC,EAC9F;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,cAAc;EAAEC,KAAK,EAAE,kBAAkB;EAAEC,QAAQ,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAU,CAAC,CACpG;AAED,OAAO,MAAMI,KAAK,GAAG,MAAAA,CAAON,KAAK,EAAEC,QAAQ,KAAK;EAC5C;EACA,MAAMM,IAAI,GAAGV,SAAS,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACT,KAAK,KAAKA,KAAK,IAAIS,CAAC,CAACR,QAAQ,KAAKA,QAAQ,CAAC;EAC9E,IAAIM,IAAI,EAAE;IACN;IACA,MAAM;MAAEN,QAAQ,EAAES,CAAC;MAAE,GAAGC;IAAoB,CAAC,GAAGJ,IAAI;IACpDK,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,mBAAmB,CAAC,CAAC;IACjE,OAAOA,mBAAmB;EAC9B;EACA,MAAM,IAAIK,KAAK,CAAC,2BAA2B,CAAC;AAChD,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACxBL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;AACnC,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAChC,MAAMC,OAAO,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;EAC5C,OAAOD,OAAO,GAAGN,IAAI,CAACQ,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;AAC/C,CAAC;AAED,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAM;EACjC,OAAO,CAAC,CAACJ,cAAc,CAAC,CAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}