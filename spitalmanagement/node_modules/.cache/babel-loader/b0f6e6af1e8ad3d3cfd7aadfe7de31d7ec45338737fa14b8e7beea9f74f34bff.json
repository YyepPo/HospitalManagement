{"ast":null,"code":"// Mock data for appointments\nconst mockAppointments = [{\n  id: 1,\n  patientId: 1,\n  patientName: 'Jane Doe',\n  date: '2024-03-20',\n  time: '10:00',\n  status: 'Scheduled',\n  patientDetails: {\n    name: 'Jane Doe',\n    age: 28,\n    bloodType: 'A+',\n    allergies: ['Penicillin', 'Pollen'],\n    doctorNotes: 'Patient has a history of seasonal allergies. Regular check-ups recommended.'\n  }\n}, {\n  id: 2,\n  patientId: 2,\n  patientName: 'John Smith',\n  date: '2024-03-21',\n  time: '11:30',\n  status: 'Scheduled',\n  patientDetails: {\n    name: 'John Smith',\n    age: 45,\n    bloodType: 'O+',\n    allergies: ['Latex', 'Aspirin'],\n    doctorNotes: 'Patient has hypertension. Blood pressure should be monitored regularly.'\n  }\n}];\n\n// Mock data for doctors\nconst mockDoctors = {\n  'Cardiology': [{\n    id: 1,\n    name: 'Dr. Sarah Johnson',\n    specialization: 'Cardiology',\n    experience: '15 years',\n    image: 'https://example.com/doctor1.jpg'\n  }, {\n    id: 2,\n    name: 'Dr. Michael Chen',\n    specialization: 'Cardiology',\n    experience: '10 years',\n    image: 'https://example.com/doctor2.jpg'\n  }],\n  'Dentist': [{\n    id: 3,\n    name: 'Dr. Emily Brown',\n    specialization: 'Dentist',\n    experience: '8 years',\n    image: 'https://example.com/doctor3.jpg'\n  }, {\n    id: 4,\n    name: 'Dr. David Wilson',\n    specialization: 'Dentist',\n    experience: '12 years',\n    image: 'https://example.com/doctor4.jpg'\n  }]\n  // Add more specializations as needed\n};\nexport const getSpecializations = () => {\n  return Object.keys(mockDoctors);\n};\nexport const getDoctorsBySpecialization = specialization => {\n  return mockDoctors[specialization] || [];\n};\nexport const getAppointments = () => {\n  return mockAppointments;\n};\nexport const getPatientDetails = patientId => {\n  const appointment = mockAppointments.find(app => app.patientId === patientId);\n  return appointment ? appointment.patientDetails : null;\n};\nexport const updatePatientNotes = (patientId, notes) => {\n  const appointmentIndex = mockAppointments.findIndex(app => app.patientId === patientId);\n  if (appointmentIndex !== -1) {\n    mockAppointments[appointmentIndex].patientDetails.doctorNotes = notes;\n    return true;\n  }\n  return false;\n};\nexport const bookAppointment = appointmentData => {\n  const newAppointment = {\n    id: mockAppointments.length + 1,\n    ...appointmentData,\n    status: 'Scheduled',\n    patientDetails: {\n      name: appointmentData.patientName,\n      age: 0,\n      // This would come from the patient's profile in a real application\n      bloodType: 'Not specified',\n      allergies: [],\n      doctorNotes: ''\n    }\n  };\n  mockAppointments.push(newAppointment);\n  return newAppointment;\n};\nexport const getDoctorSchedule = doctorId => {\n  // Mock schedule data\n  return {\n    workingDays: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    startTime: '09:00',\n    endTime: '17:00',\n    appointments: mockAppointments.filter(app => app.doctorId === doctorId)\n  };\n};","map":{"version":3,"names":["mockAppointments","id","patientId","patientName","date","time","status","patientDetails","name","age","bloodType","allergies","doctorNotes","mockDoctors","specialization","experience","image","getSpecializations","Object","keys","getDoctorsBySpecialization","getAppointments","getPatientDetails","appointment","find","app","updatePatientNotes","notes","appointmentIndex","findIndex","bookAppointment","appointmentData","newAppointment","length","push","getDoctorSchedule","doctorId","workingDays","startTime","endTime","appointments","filter"],"sources":["C:/Users/LENOVO/Desktop/spitalmanagement/src/services/appointmentService.js"],"sourcesContent":["// Mock data for appointments\r\nconst mockAppointments = [\r\n  {\r\n    id: 1,\r\n    patientId: 1,\r\n    patientName: 'Jane Doe',\r\n    date: '2024-03-20',\r\n    time: '10:00',\r\n    status: 'Scheduled',\r\n    patientDetails: {\r\n      name: 'Jane Doe',\r\n      age: 28,\r\n      bloodType: 'A+',\r\n      allergies: ['Penicillin', 'Pollen'],\r\n      doctorNotes: 'Patient has a history of seasonal allergies. Regular check-ups recommended.'\r\n    }\r\n  },\r\n  {\r\n    id: 2,\r\n    patientId: 2,\r\n    patientName: 'John Smith',\r\n    date: '2024-03-21',\r\n    time: '11:30',\r\n    status: 'Scheduled',\r\n    patientDetails: {\r\n      name: 'John Smith',\r\n      age: 45,\r\n      bloodType: 'O+',\r\n      allergies: ['Latex', 'Aspirin'],\r\n      doctorNotes: 'Patient has hypertension. Blood pressure should be monitored regularly.'\r\n    }\r\n  }\r\n];\r\n\r\n// Mock data for doctors\r\nconst mockDoctors = {\r\n  'Cardiology': [\r\n    { id: 1, name: 'Dr. Sarah Johnson', specialization: 'Cardiology', experience: '15 years', image: 'https://example.com/doctor1.jpg' },\r\n    { id: 2, name: 'Dr. Michael Chen', specialization: 'Cardiology', experience: '10 years', image: 'https://example.com/doctor2.jpg' }\r\n  ],\r\n  'Dentist': [\r\n    { id: 3, name: 'Dr. Emily Brown', specialization: 'Dentist', experience: '8 years', image: 'https://example.com/doctor3.jpg' },\r\n    { id: 4, name: 'Dr. David Wilson', specialization: 'Dentist', experience: '12 years', image: 'https://example.com/doctor4.jpg' }\r\n  ],\r\n  // Add more specializations as needed\r\n};\r\n\r\nexport const getSpecializations = () => {\r\n  return Object.keys(mockDoctors);\r\n};\r\n\r\nexport const getDoctorsBySpecialization = (specialization) => {\r\n  return mockDoctors[specialization] || [];\r\n};\r\n\r\nexport const getAppointments = () => {\r\n  return mockAppointments;\r\n};\r\n\r\nexport const getPatientDetails = (patientId) => {\r\n  const appointment = mockAppointments.find(app => app.patientId === patientId);\r\n  return appointment ? appointment.patientDetails : null;\r\n};\r\n\r\nexport const updatePatientNotes = (patientId, notes) => {\r\n  const appointmentIndex = mockAppointments.findIndex(app => app.patientId === patientId);\r\n  if (appointmentIndex !== -1) {\r\n    mockAppointments[appointmentIndex].patientDetails.doctorNotes = notes;\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const bookAppointment = (appointmentData) => {\r\n  const newAppointment = {\r\n    id: mockAppointments.length + 1,\r\n    ...appointmentData,\r\n    status: 'Scheduled',\r\n    patientDetails: {\r\n      name: appointmentData.patientName,\r\n      age: 0, // This would come from the patient's profile in a real application\r\n      bloodType: 'Not specified',\r\n      allergies: [],\r\n      doctorNotes: ''\r\n    }\r\n  };\r\n  mockAppointments.push(newAppointment);\r\n  return newAppointment;\r\n};\r\n\r\nexport const getDoctorSchedule = (doctorId) => {\r\n  // Mock schedule data\r\n  return {\r\n    workingDays: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\r\n    startTime: '09:00',\r\n    endTime: '17:00',\r\n    appointments: mockAppointments.filter(app => app.doctorId === doctorId)\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}