{"ast":null,"code":"// Mock user data - Replace with actual API calls\nconst mockUsers = [{\n  id: 1,\n  name: \"John Doe\",\n  email: \"john@example.com\",\n  role: \"admin\"\n}, {\n  id: 2,\n  name: \"Dr. Smith\",\n  email: \"smith@example.com\",\n  role: \"doctor\"\n}, {\n  id: 3,\n  name: \"Jane Patient\",\n  email: \"jane@example.com\",\n  role: \"patient\"\n}];\nexport const getAllUsers = () => {\n  return mockUsers;\n};\nexport const updateUserRole = async (userId, newRole) => {\n  const userIndex = mockUsers.findIndex(u => u.id === userId);\n  if (userIndex !== -1) {\n    mockUsers[userIndex] = {\n      ...mockUsers[userIndex],\n      role: newRole\n    };\n    return mockUsers[userIndex];\n  }\n  throw new Error('User not found');\n};\nexport const getUserById = userId => {\n  const user = mockUsers.find(u => u.id === userId);\n  if (!user) {\n    throw new Error('User not found');\n  }\n  return user;\n};","map":{"version":3,"names":["mockUsers","id","name","email","role","getAllUsers","updateUserRole","userId","newRole","userIndex","findIndex","u","Error","getUserById","user","find"],"sources":["C:/Users/LENOVO/Desktop/spitalmanagement/src/services/userService.js"],"sourcesContent":["// Mock user data - Replace with actual API calls\r\nconst mockUsers = [\r\n    { id: 1, name: \"John Doe\", email: \"john@example.com\", role: \"admin\" },\r\n    { id: 2, name: \"Dr. Smith\", email: \"smith@example.com\", role: \"doctor\" },\r\n    { id: 3, name: \"Jane Patient\", email: \"jane@example.com\", role: \"patient\" },\r\n];\r\n\r\nexport const getAllUsers = () => {\r\n    return mockUsers;\r\n};\r\n\r\nexport const updateUserRole = async (userId, newRole) => {\r\n    const userIndex = mockUsers.findIndex(u => u.id === userId);\r\n    if (userIndex !== -1) {\r\n        mockUsers[userIndex] = {\r\n            ...mockUsers[userIndex],\r\n            role: newRole\r\n        };\r\n        return mockUsers[userIndex];\r\n    }\r\n    throw new Error('User not found');\r\n};\r\n\r\nexport const getUserById = (userId) => {\r\n    const user = mockUsers.find(u => u.id === userId);\r\n    if (!user) {\r\n        throw new Error('User not found');\r\n    }\r\n    return user;\r\n}; "],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,CACd;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE,kBAAkB;EAAEC,IAAI,EAAE;AAAQ,CAAC,EACrE;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE,mBAAmB;EAAEC,IAAI,EAAE;AAAS,CAAC,EACxE;EAAEH,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,cAAc;EAAEC,KAAK,EAAE,kBAAkB;EAAEC,IAAI,EAAE;AAAU,CAAC,CAC9E;AAED,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC7B,OAAOL,SAAS;AACpB,CAAC;AAED,OAAO,MAAMM,cAAc,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,KAAK;EACrD,MAAMC,SAAS,GAAGT,SAAS,CAACU,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKM,MAAM,CAAC;EAC3D,IAAIE,SAAS,KAAK,CAAC,CAAC,EAAE;IAClBT,SAAS,CAACS,SAAS,CAAC,GAAG;MACnB,GAAGT,SAAS,CAACS,SAAS,CAAC;MACvBL,IAAI,EAAEI;IACV,CAAC;IACD,OAAOR,SAAS,CAACS,SAAS,CAAC;EAC/B;EACA,MAAM,IAAIG,KAAK,CAAC,gBAAgB,CAAC;AACrC,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIN,MAAM,IAAK;EACnC,MAAMO,IAAI,GAAGd,SAAS,CAACe,IAAI,CAACJ,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKM,MAAM,CAAC;EACjD,IAAI,CAACO,IAAI,EAAE;IACP,MAAM,IAAIF,KAAK,CAAC,gBAAgB,CAAC;EACrC;EACA,OAAOE,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}