{"ast":null,"code":"// Mock appointments data\nconst mockAppointments = [{\n  id: 1,\n  patientName: 'Jane Patient',\n  patientEmail: 'jane@example.com',\n  doctorName: 'Dr. Smith',\n  doctorEmail: 'smith@example.com',\n  specialization: 'Cardiology',\n  date: new Date().toISOString().split('T')[0],\n  // Today\n  time: '10:00 AM',\n  status: 'pending'\n}, {\n  id: 2,\n  patientName: 'John Wilson',\n  patientEmail: 'john@example.com',\n  doctorName: 'Dr. Smith',\n  doctorEmail: 'smith@example.com',\n  specialization: 'Cardiology',\n  date: new Date().toISOString().split('T')[0],\n  // Today\n  time: '11:30 AM',\n  status: 'confirmed'\n}, {\n  id: 3,\n  patientName: 'Sarah Johnson',\n  patientEmail: 'sarah@example.com',\n  doctorName: 'Dr. Smith',\n  doctorEmail: 'smith@example.com',\n  specialization: 'Cardiology',\n  date: new Date().toISOString().split('T')[0],\n  // Today\n  time: '2:00 PM',\n  status: 'completed'\n}, {\n  id: 4,\n  patientName: 'Michael Brown',\n  patientEmail: 'michael@example.com',\n  doctorName: 'Dr. Smith',\n  doctorEmail: 'smith@example.com',\n  specialization: 'Cardiology',\n  date: (() => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return tomorrow.toISOString().split('T')[0];\n  })(),\n  // Tomorrow\n  time: '9:30 AM',\n  status: 'pending'\n}, {\n  id: 5,\n  patientName: 'Emily Davis',\n  patientEmail: 'emily@example.com',\n  doctorName: 'Dr. Smith',\n  doctorEmail: 'smith@example.com',\n  specialization: 'Cardiology',\n  date: (() => {\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    return nextWeek.toISOString().split('T')[0];\n  })(),\n  // Next week\n  time: '3:30 PM',\n  status: 'confirmed'\n}];\n\n// Mock doctors data with their schedules\nconst mockDoctors = {\n  Dentist: [{\n    id: 1,\n    name: 'Dr. Johnson',\n    email: 'johnson@example.com',\n    specialization: 'Dentist',\n    experience: '10 years',\n    image: 'doctor1.jpg'\n  }],\n  Cardiology: [{\n    id: 2,\n    name: 'Dr. Smith',\n    email: 'smith@example.com',\n    specialization: 'Cardiology',\n    experience: '15 years',\n    image: 'doctor2.jpg'\n  }]\n  // ... other specializations\n};\nexport const getSpecializations = () => {\n  return Object.keys(mockDoctors);\n};\nexport const getDoctorsBySpecialization = specialization => {\n  return mockDoctors[specialization] || [];\n};\nexport const getAppointments = () => {\n  return mockAppointments;\n};\nexport const bookAppointment = appointmentData => {\n  const newAppointment = {\n    id: mockAppointments.length + 1,\n    ...appointmentData,\n    status: 'pending'\n  };\n  mockAppointments.push(newAppointment);\n  return newAppointment;\n};\nexport const updateAppointmentStatus = (appointmentId, newStatus) => {\n  const appointmentIndex = mockAppointments.findIndex(app => app.id === appointmentId);\n  if (appointmentIndex === -1) {\n    throw new Error('Appointment not found');\n  }\n  mockAppointments[appointmentIndex] = {\n    ...mockAppointments[appointmentIndex],\n    status: newStatus\n  };\n  return mockAppointments[appointmentIndex];\n};\nexport const getDoctorSchedule = doctorId => {\n  // Mock schedule data\n  return {\n    workingDays: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    workingHours: {\n      start: '09:00',\n      end: '17:00'\n    },\n    appointments: mockAppointments.filter(app => {\n      var _mockDoctors$find;\n      return app.doctorEmail === ((_mockDoctors$find = mockDoctors.find(doc => doc.id === doctorId)) === null || _mockDoctors$find === void 0 ? void 0 : _mockDoctors$find.email);\n    })\n  };\n};","map":{"version":3,"names":["mockAppointments","id","patientName","patientEmail","doctorName","doctorEmail","specialization","date","Date","toISOString","split","time","status","tomorrow","setDate","getDate","nextWeek","mockDoctors","Dentist","name","email","experience","image","Cardiology","getSpecializations","Object","keys","getDoctorsBySpecialization","getAppointments","bookAppointment","appointmentData","newAppointment","length","push","updateAppointmentStatus","appointmentId","newStatus","appointmentIndex","findIndex","app","Error","getDoctorSchedule","doctorId","workingDays","workingHours","start","end","appointments","filter","_mockDoctors$find","find","doc"],"sources":["C:/Users/LENOVO/Desktop/spitalmanagement/src/services/appointmentService.js"],"sourcesContent":["// Mock appointments data\r\nconst mockAppointments = [\r\n  {\r\n    id: 1,\r\n    patientName: 'Jane Patient',\r\n    patientEmail: 'jane@example.com',\r\n    doctorName: 'Dr. Smith',\r\n    doctorEmail: 'smith@example.com',\r\n    specialization: 'Cardiology',\r\n    date: new Date().toISOString().split('T')[0], // Today\r\n    time: '10:00 AM',\r\n    status: 'pending'\r\n  },\r\n  {\r\n    id: 2,\r\n    patientName: 'John Wilson',\r\n    patientEmail: 'john@example.com',\r\n    doctorName: 'Dr. Smith',\r\n    doctorEmail: 'smith@example.com',\r\n    specialization: 'Cardiology',\r\n    date: new Date().toISOString().split('T')[0], // Today\r\n    time: '11:30 AM',\r\n    status: 'confirmed'\r\n  },\r\n  {\r\n    id: 3,\r\n    patientName: 'Sarah Johnson',\r\n    patientEmail: 'sarah@example.com',\r\n    doctorName: 'Dr. Smith',\r\n    doctorEmail: 'smith@example.com',\r\n    specialization: 'Cardiology',\r\n    date: new Date().toISOString().split('T')[0], // Today\r\n    time: '2:00 PM',\r\n    status: 'completed'\r\n  },\r\n  {\r\n    id: 4,\r\n    patientName: 'Michael Brown',\r\n    patientEmail: 'michael@example.com',\r\n    doctorName: 'Dr. Smith',\r\n    doctorEmail: 'smith@example.com',\r\n    specialization: 'Cardiology',\r\n    date: (() => {\r\n      const tomorrow = new Date();\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      return tomorrow.toISOString().split('T')[0];\r\n    })(), // Tomorrow\r\n    time: '9:30 AM',\r\n    status: 'pending'\r\n  },\r\n  {\r\n    id: 5,\r\n    patientName: 'Emily Davis',\r\n    patientEmail: 'emily@example.com',\r\n    doctorName: 'Dr. Smith',\r\n    doctorEmail: 'smith@example.com',\r\n    specialization: 'Cardiology',\r\n    date: (() => {\r\n      const nextWeek = new Date();\r\n      nextWeek.setDate(nextWeek.getDate() + 7);\r\n      return nextWeek.toISOString().split('T')[0];\r\n    })(), // Next week\r\n    time: '3:30 PM',\r\n    status: 'confirmed'\r\n  }\r\n];\r\n\r\n// Mock doctors data with their schedules\r\nconst mockDoctors = {\r\n  Dentist: [\r\n    {\r\n      id: 1,\r\n      name: 'Dr. Johnson',\r\n      email: 'johnson@example.com',\r\n      specialization: 'Dentist',\r\n      experience: '10 years',\r\n      image: 'doctor1.jpg'\r\n    }\r\n  ],\r\n  Cardiology: [\r\n    {\r\n      id: 2,\r\n      name: 'Dr. Smith',\r\n      email: 'smith@example.com',\r\n      specialization: 'Cardiology',\r\n      experience: '15 years',\r\n      image: 'doctor2.jpg'\r\n    }\r\n  ],\r\n  // ... other specializations\r\n};\r\n\r\nexport const getSpecializations = () => {\r\n  return Object.keys(mockDoctors);\r\n};\r\n\r\nexport const getDoctorsBySpecialization = (specialization) => {\r\n  return mockDoctors[specialization] || [];\r\n};\r\n\r\nexport const getAppointments = () => {\r\n  return mockAppointments;\r\n};\r\n\r\nexport const bookAppointment = (appointmentData) => {\r\n  const newAppointment = {\r\n    id: mockAppointments.length + 1,\r\n    ...appointmentData,\r\n    status: 'pending'\r\n  };\r\n  mockAppointments.push(newAppointment);\r\n  return newAppointment;\r\n};\r\n\r\nexport const updateAppointmentStatus = (appointmentId, newStatus) => {\r\n  const appointmentIndex = mockAppointments.findIndex(app => app.id === appointmentId);\r\n  if (appointmentIndex === -1) {\r\n    throw new Error('Appointment not found');\r\n  }\r\n  \r\n  mockAppointments[appointmentIndex] = {\r\n    ...mockAppointments[appointmentIndex],\r\n    status: newStatus\r\n  };\r\n  \r\n  return mockAppointments[appointmentIndex];\r\n};\r\n\r\nexport const getDoctorSchedule = (doctorId) => {\r\n  // Mock schedule data\r\n  return {\r\n    workingDays: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\r\n    workingHours: {\r\n      start: '09:00',\r\n      end: '17:00'\r\n    },\r\n    appointments: mockAppointments.filter(app => \r\n      app.doctorEmail === mockDoctors.find(doc => doc.id === doctorId)?.email\r\n    )\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}