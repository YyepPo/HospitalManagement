{"ast":null,"code":"\"use strict\";\n'use client';\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useParsedFormat = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _useUtils = require(\"../internals/hooks/useUtils\");\nvar _buildSectionsFromFormat = require(\"../internals/hooks/useField/buildSectionsFromFormat\");\nvar _useField = require(\"../internals/hooks/useField/useField.utils\");\nvar _usePickersTranslations = require(\"./usePickersTranslations\");\n/**\n * Returns the parsed format to be rendered in the field when there is no value or in other parts of the Picker.\n * This format is localized (e.g: `AAAA` for the year with the French locale) and cannot be parsed by your date library.\n * @param {object} The parameters needed to build the placeholder.\n * @param {string} params.format Format of the date to use.\n * @param {'dense' | 'spacious'} params.formatDensity Density of the format (setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character).\n * @param {boolean} params.shouldRespectLeadingZeros If `true`, the format will respect the leading zeroes, if `false`, the format will always add leading zeroes.\n * @returns\n */\nconst useParsedFormat = parameters => {\n  const {\n    format,\n    formatDensity = 'dense',\n    shouldRespectLeadingZeros = false\n  } = parameters;\n  const utils = (0, _useUtils.useUtils)();\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const translations = (0, _usePickersTranslations.usePickersTranslations)();\n  const localizedDigits = React.useMemo(() => (0, _useField.getLocalizedDigits)(utils), [utils]);\n  return React.useMemo(() => {\n    const sections = (0, _buildSectionsFromFormat.buildSectionsFromFormat)({\n      utils,\n      format,\n      formatDensity,\n      isRtl,\n      shouldRespectLeadingZeros,\n      localeText: translations,\n      localizedDigits,\n      date: null,\n      // TODO v9: Make sure we still don't reverse in `buildSectionsFromFormat` when using `useParsedFormat`.\n      enableAccessibleFieldDOMStructure: false\n    });\n    return sections.map(section => `${section.startSeparator}${section.placeholder}${section.endSeparator}`).join('');\n  }, [utils, isRtl, translations, localizedDigits, format, formatDensity, shouldRespectLeadingZeros]);\n};\nexports.useParsedFormat = useParsedFormat;","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","useParsedFormat","React","_RtlProvider","_useUtils","_buildSectionsFromFormat","_useField","_usePickersTranslations","parameters","format","formatDensity","shouldRespectLeadingZeros","utils","useUtils","isRtl","useRtl","translations","usePickersTranslations","localizedDigits","useMemo","getLocalizedDigits","sections","buildSectionsFromFormat","localeText","date","enableAccessibleFieldDOMStructure","map","section","startSeparator","placeholder","endSeparator","join"],"sources":["C:/Users/LENOVO/Desktop/spitalmanagement/node_modules/@mui/x-date-pickers/node/hooks/useParsedFormat.js"],"sourcesContent":["\"use strict\";\n'use client';\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useParsedFormat = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _RtlProvider = require(\"@mui/system/RtlProvider\");\nvar _useUtils = require(\"../internals/hooks/useUtils\");\nvar _buildSectionsFromFormat = require(\"../internals/hooks/useField/buildSectionsFromFormat\");\nvar _useField = require(\"../internals/hooks/useField/useField.utils\");\nvar _usePickersTranslations = require(\"./usePickersTranslations\");\n/**\n * Returns the parsed format to be rendered in the field when there is no value or in other parts of the Picker.\n * This format is localized (e.g: `AAAA` for the year with the French locale) and cannot be parsed by your date library.\n * @param {object} The parameters needed to build the placeholder.\n * @param {string} params.format Format of the date to use.\n * @param {'dense' | 'spacious'} params.formatDensity Density of the format (setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character).\n * @param {boolean} params.shouldRespectLeadingZeros If `true`, the format will respect the leading zeroes, if `false`, the format will always add leading zeroes.\n * @returns\n */\nconst useParsedFormat = parameters => {\n  const {\n    format,\n    formatDensity = 'dense',\n    shouldRespectLeadingZeros = false\n  } = parameters;\n  const utils = (0, _useUtils.useUtils)();\n  const isRtl = (0, _RtlProvider.useRtl)();\n  const translations = (0, _usePickersTranslations.usePickersTranslations)();\n  const localizedDigits = React.useMemo(() => (0, _useField.getLocalizedDigits)(utils), [utils]);\n  return React.useMemo(() => {\n    const sections = (0, _buildSectionsFromFormat.buildSectionsFromFormat)({\n      utils,\n      format,\n      formatDensity,\n      isRtl,\n      shouldRespectLeadingZeros,\n      localeText: translations,\n      localizedDigits,\n      date: null,\n      // TODO v9: Make sure we still don't reverse in `buildSectionsFromFormat` when using `useParsedFormat`.\n      enableAccessibleFieldDOMStructure: false\n    });\n    return sections.map(section => `${section.startSeparator}${section.placeholder}${section.endSeparator}`).join('');\n  }, [utils, isRtl, translations, localizedDigits, format, formatDensity, shouldRespectLeadingZeros]);\n};\nexports.useParsedFormat = useParsedFormat;"],"mappings":"AAAA,YAAY;AACZ,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAC9FC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,IAAIC,KAAK,GAAGR,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AACrD,IAAIQ,YAAY,GAAGR,OAAO,CAAC,yBAAyB,CAAC;AACrD,IAAIS,SAAS,GAAGT,OAAO,CAAC,6BAA6B,CAAC;AACtD,IAAIU,wBAAwB,GAAGV,OAAO,CAAC,qDAAqD,CAAC;AAC7F,IAAIW,SAAS,GAAGX,OAAO,CAAC,4CAA4C,CAAC;AACrE,IAAIY,uBAAuB,GAAGZ,OAAO,CAAC,0BAA0B,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,eAAe,GAAGO,UAAU,IAAI;EACpC,MAAM;IACJC,MAAM;IACNC,aAAa,GAAG,OAAO;IACvBC,yBAAyB,GAAG;EAC9B,CAAC,GAAGH,UAAU;EACd,MAAMI,KAAK,GAAG,CAAC,CAAC,EAAER,SAAS,CAACS,QAAQ,EAAE,CAAC;EACvC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEX,YAAY,CAACY,MAAM,EAAE,CAAC;EACxC,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAET,uBAAuB,CAACU,sBAAsB,EAAE,CAAC;EAC1E,MAAMC,eAAe,GAAGhB,KAAK,CAACiB,OAAO,CAAC,MAAM,CAAC,CAAC,EAAEb,SAAS,CAACc,kBAAkB,EAAER,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAC9F,OAAOV,KAAK,CAACiB,OAAO,CAAC,MAAM;IACzB,MAAME,QAAQ,GAAG,CAAC,CAAC,EAAEhB,wBAAwB,CAACiB,uBAAuB,EAAE;MACrEV,KAAK;MACLH,MAAM;MACNC,aAAa;MACbI,KAAK;MACLH,yBAAyB;MACzBY,UAAU,EAAEP,YAAY;MACxBE,eAAe;MACfM,IAAI,EAAE,IAAI;MACV;MACAC,iCAAiC,EAAE;IACrC,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACK,GAAG,CAACC,OAAO,IAAI,GAAGA,OAAO,CAACC,cAAc,GAAGD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,YAAY,EAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACnH,CAAC,EAAE,CAACnB,KAAK,EAAEE,KAAK,EAAEE,YAAY,EAAEE,eAAe,EAAET,MAAM,EAAEC,aAAa,EAAEC,yBAAyB,CAAC,CAAC;AACrG,CAAC;AACDZ,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}